---
AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates an EC2 instance running a local geth network.

Parameters:
  RootStackName:
    Type: String
  EC2KeyPairName:
    Type: String
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  EC2InstanceProfileArn:
    Type: String
  EC2InstanceType:
    Type: String
  NetworkSubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>
  NestedTemplateOrigin:
    Type: String
  RunEthExplorer:
    Type: String
  RunEthStats:
    Type: String
  EthereumDockerImage:
    Type: String
  EthStatsDockerImage:
    Type: String
  EthExplorerDockerImage:
    Type: String
  DockerRegion:
    Type: String
  DockerECRAccount:
    Type: String
  NetworkID:
    Type: String
  InitialDifficulty:
    Type: Number
  EthereumNodeLogLevel:
    Type: String
  MinerAccountAddress:
    Type: String
  InitialAccountAddresses:
    Type: String
  InitialBlockGasLimit:
    Type: Number
  BlockGasLimit:
    Type: Number
  InitialAccountBalance:
    Type: Number
  GasPriceFloor:
    Type: Number
  EthStatsSecret:
    Type: String

Conditions:
  IsPublicNetwork:
    Fn::Or:
      - Fn::Equals:
        - Ref: NetworkID
        - 1
      - Fn::Equals:
        - Ref: NetworkID
        - 2
      - Fn::Equals:
        - Ref: NetworkID
        - 3
      - Fn::Equals:
        - Ref: NetworkID
        - 4

  EthExplorerCondition:
    Fn::Equals:
    - Ref: RunEthExplorer
    - "true"

  EthStatsCondition:
    Fn::Equals:
    - Ref: RunEthStats
    - "true"


Resources:

  ServiceAutoScalingGroupStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateOrigin}ethereum-autoscalegroup.template.yaml"
      Parameters:
        InstanceNames:
          Ref: RootStackName
        EC2KeyPairName:
          Ref: EC2KeyPairName
        NetworkSubnetIDs:
          Fn::Join:
            - ","
            - Ref: NetworkSubnetIDs
        NumberOfEC2Instances: 1
        EC2SecurityGroup:
          Ref: EC2SecurityGroup
        EC2InstanceProfileArn:
          Ref: EC2InstanceProfileArn
        InstanceAMICode: AMZNEC2AMI
        EC2InstanceType:
          Ref: EC2InstanceType
        LaunchScriptText:
          Fn::Join:
            - "\n"
            - - "sudo yum install -y docker" # Install docker
              - "sudo service docker start" # Start docker
              - "sudo usermod -a -G docker ec2-user" # Make it so we don't have to sudo for docker
              - !Sub "eval `aws ecr get-login --region ${DockerRegion} --no-include-email --registry-ids ${DockerECRAccount}`" # Log in to docker
              - Fn::Join:
                - " "
                - - !Sub "docker run -d --network=host -p 8545:8545 -p 8546:8546 -p 30303:30303 ${EthereumDockerImage}"
                  - Fn::If:
                    - IsPublicNetwork
                    - ""
                    - "--nodiscover"
                  - "--networkid"
                  - Ref: NetworkID
                  - "--initial-difficulty"
                  - Ref: InitialDifficulty
                  - "--log-level"
                  - Ref: EthereumNodeLogLevel
                  - "--rpc"
                  - "--rpcapi"
                  - "web3,net,eth"
                  - "--rpcaddr 0.0.0.0"
                  - "--rpcvhosts '*'"
                  - "--rpccorsdomain '*'"
                  - "--ws"
                  - "--wsapi web3,net,eth"
                  - "--wsaddr 0.0.0.0"
                  - "--wsport 8546"
                  - "--wsorigins *"
                  - "--mine"
                  - "--minerthreads 1"
                  - "--etherbase"
                  - Ref: MinerAccountAddress
                  - "--funded-accounts"
                  - Ref: InitialAccountAddresses
                  - "--targetgaslimit"
                  - Ref: BlockGasLimit
                  - "--initial-block-gas-limit"
                  - Ref: InitialBlockGasLimit
                  - "--initial-account-balance"
                  - Ref: InitialAccountBalance
                  - "--gasprice"
                  - Ref: GasPriceFloor
                  - Fn::If:
                    - EthStatsCondition
                    - Fn::Join:
                      - " "
                      - - "--ethstats-ws-url"
                        - "ws://localhost:80"
                        - "--ethstats-ws-secret"
                        - Ref: EthStatsSecret
                    - ""
              - Fn::If:
                - EthStatsCondition
                - !Sub "docker run -d -p 80:80 -e \"WS_SECRET=${EthStatsSecret}\" -e \"PORT=80\" ${EthStatsDockerImage}"
                - ""
              - Fn::If:
                - EthExplorerCondition
                - !Sub "docker run -d -p 8080:8080 -e \"IS_LOCAL_GETH=true\" -e \"PORT=8080\" ${EthExplorerDockerImage}"
                - ""
